{
	"version": "https://jsonfeed.org/version/1",
	"title": "John Turner",
	"icon": "https://micro.blog/while1malloc0/avatar.jpg",
	"home_page_url": "https://micro.breaking.computer/",
	"feed_url": "https://micro.breaking.computer/feed.json",
	"items": [
		
			{
				"id": "http://while1malloc0.micro.blog/2023/12/29/til-changing-settings.html",
				"title": "TIL: Changing Settings Types in Obsidian Plugins",
				"content_html": "<h2 id=\"problem\">Problem</h2>\n<p>I&rsquo;m working on a plugin for <a href=\"https://obsidian.md\">Obsdian</a> and couldn&rsquo;t figure out why a particular setting was getting mangled. Turns out, you have to delete the <code>data.json</code> file if you update your settings type.</p>\n<p>The plugin is for self destructing notes, and right now it has two settings. They used to look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-typescript\" data-lang=\"typescript\"><span style=\"color:#66d9ef\">type</span> <span style=\"color:#a6e22e\">Interval</span> <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#39;daily&#39;</span> <span style=\"color:#f92672\">|</span> <span style=\"color:#e6db74\">&#39;weekly&#39;</span>\n\n<span style=\"color:#66d9ef\">interface</span> <span style=\"color:#a6e22e\">SelfDestructPluginSettings</span> {\n\t<span style=\"color:#a6e22e\">deletionInterval</span>: <span style=\"color:#66d9ef\">Interval</span>;\n\t<span style=\"color:#a6e22e\">checkInterval</span>: <span style=\"color:#66d9ef\">number</span>;\n}\n</code></pre></div><p>I learned that Obsidian uses <a href=\"https://docs.obsidian.md/Plugins/Events#Timing+events\">moment.js</a> for intervals, and that it has a built in duration type. I wanted to switch my settings to look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-typescript\" data-lang=\"typescript\"><span style=\"color:#66d9ef\">interface</span> <span style=\"color:#a6e22e\">SelfDestructPluginSettings</span> {\n\t<span style=\"color:#a6e22e\">deletionInterval</span>: <span style=\"color:#66d9ef\">moment.Duration</span>;\n\t<span style=\"color:#a6e22e\">checkInterval</span>: <span style=\"color:#66d9ef\">moment.Duration</span>;\n}\n</code></pre></div><p>Making that change blew up a bunch of things, and it turns out that it&rsquo;s because Obsidian stores plugin data in a <code>data.json</code> file in your plugin&rsquo;s directory. For the pre-<code>moment</code> types, the settings look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">{\n\t<span style=\"color:#f92672\">&#34;deletionInterval&#34;</span>: <span style=\"color:#e6db74\">&#34;weekly&#34;</span>,\n\t<span style=\"color:#f92672\">&#34;checkInterval&#34;</span>: <span style=\"color:#ae81ff\">1000</span>\n}\n</code></pre></div><p><code>moment.js</code> stores durations in <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Durations\">ISO-8601 format</a>, so when loading the old settings, nothing would parse.</p>\n<h2 id=\"solution\">Solution</h2>\n<p>Removing the <code>data.json</code> file and letting Obsidian recreate it worked.</p>\n",
				"content_text": "\n## Problem\n\nI'm working on a plugin for [Obsdian](https://obsidian.md) and couldn't figure out why a particular setting was getting mangled. Turns out, you have to delete the `data.json` file if you update your settings type. \n\nThe plugin is for self destructing notes, and right now it has two settings. They used to look like this:\n\n```typescript\ntype Interval = 'daily' | 'weekly'\n\ninterface SelfDestructPluginSettings {\n\tdeletionInterval: Interval;\n\tcheckInterval: number;\n}\n```\n\nI learned that Obsidian uses [moment.js](https://docs.obsidian.md/Plugins/Events#Timing+events) for intervals, and that it has a built in duration type. I wanted to switch my settings to look like this:\n\n```typescript\ninterface SelfDestructPluginSettings {\n\tdeletionInterval: moment.Duration;\n\tcheckInterval: moment.Duration;\n}\n```\n\nMaking that change blew up a bunch of things, and it turns out that it's because Obsidian stores plugin data in a `data.json` file in your plugin's directory. For the pre-`moment` types, the settings look like this:\n\n```json\n{\n\t\"deletionInterval\": \"weekly\",\n\t\"checkInterval\": 1000\n}\n```\n\n`moment.js` stores durations in [ISO-8601 format](https://en.wikipedia.org/wiki/ISO_8601#Durations), so when loading the old settings, nothing would parse.\n\n## Solution\n\nRemoving the `data.json` file and letting Obsidian recreate it worked.\n",
				"date_published": "2023-12-29T23:04:33-05:00",
				"url": "https://micro.breaking.computer/2023/12/29/til-changing-settings.html",
				"tags": ["software"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/12/11/hello-obsidian.html",
				"title": "Hello, Obsidian",
				"content_html": "<p>Test post!</p>\n<p>I want to blog more, and I also want to use Obsidian more, so I&rsquo;m trying out the <a href=\"https://github.com/otaviocc/obsidian-microblog\">micro.publish</a> plugin.</p>\n",
				"content_text": "\nTest post!\n\nI want to blog more, and I also want to use Obsidian more, so I'm trying out the [micro.publish](https://github.com/otaviocc/obsidian-microblog) plugin.\n",
				"date_published": "2023-12-11T21:05:39-05:00",
				"url": "https://micro.breaking.computer/2023/12/11/hello-obsidian.html",
				"tags": ["administrative"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/05/06/innovation-tokens-are.html",
				"title": "Innovation Tokens Are A Pretty Good Money Metaphor",
				"content_html": "<p>One of the things I like most about the <a href=\"https://mcfunley.com/choose-boring-technology\">innovation token</a> metaphor is that it works much better as a money metaphor than, say, technical debt. Technical debt is a spurious metaphor, one that only makes sense when compared to a very specific financial context that is largely divorced from the average person&rsquo;s household finances. This makes it pretty tough to come up with a shared context for talking about technical debt (and why I prefer terms like Chelsea Troy&rsquo;s <a href=\"https://chelseatroy.com/2021/01/14/quantifying-technical-debt/\">Maintenance Load</a>).</p>\n<p>In contrast, innovation tokens actually work pretty well as a money metaphor, at least as far as affecting the reputation of a project/technical lead goes. A Senior Architect is unwilling to spend any innovation tokens at all? They&rsquo;re going to be seen as miserly, same as if they refused to spend money. Someone spends all of their innovations tokens and then some on a resume project? They&rsquo;ll likely have the same sentiments attached to their reputation as someone who flippantly spends money that they don&rsquo;t have.</p>\n<p>It even works in more subtle cases: someone can spend one innovation token and get very luck on it, thereby giving them leeway to spend an outsized number, regardless of their ability to do so wisely. At many companies, there&rsquo;s the equivalent of an innovation token Warren Buffet, someone who has had the right combination of luck and skillful investment of their tokens that they essentially have access to infinite tokens now. And of course, those that come into a company with the blessing of nepotism will inherit several innovation tokens.</p>\n<p>The one place that innovation tokens as a money metaphor breaks down, even more than technical debt, is that you can&rsquo;t really transfer them. A team can very easily transfer its technical debt to another team, but it&rsquo;s much more nebulous what transferring innovation tokens means. &ldquo;I&rsquo;m going to take a more cautious approach so that $other_team can try something new&rdquo; isn&rsquo;t really something I&rsquo;ve ever heard before, nor does it make a ton of sense.</p>\n<p>One thing to note here is that I&rsquo;m using innovation tokens slightly outside of its original context. The original essay about them says: &ldquo;let&rsquo;s say every company gets about three innovation tokens. You can spend these however you want, but the supply is fixed for a long while. You might get a few more after you achieve a certain level of stability and maturity&hellip;&rdquo; In my experience, innovation tokens in larger companies aren&rsquo;t necessarily a pot shared by the entire company, but divided into pools among various parts of the engineering organization. When someone comes up with a new technical design for a project, they utilize some of that pool, and access to that pool is like access to credit. Which, come to think of it, is yet another way in which innovation tokens are a better money metaphor than technical debt.</p>\n",
				"content_text": "One of the things I like most about the [innovation token](https://mcfunley.com/choose-boring-technology) metaphor is that it works much better as a money metaphor than, say, technical debt. Technical debt is a spurious metaphor, one that only makes sense when compared to a very specific financial context that is largely divorced from the average person's household finances. This makes it pretty tough to come up with a shared context for talking about technical debt (and why I prefer terms like Chelsea Troy's [Maintenance Load](https://chelseatroy.com/2021/01/14/quantifying-technical-debt/)). \n\nIn contrast, innovation tokens actually work pretty well as a money metaphor, at least as far as affecting the reputation of a project/technical lead goes. A Senior Architect is unwilling to spend any innovation tokens at all? They're going to be seen as miserly, same as if they refused to spend money. Someone spends all of their innovations tokens and then some on a resume project? They'll likely have the same sentiments attached to their reputation as someone who flippantly spends money that they don't have. \n\nIt even works in more subtle cases: someone can spend one innovation token and get very luck on it, thereby giving them leeway to spend an outsized number, regardless of their ability to do so wisely. At many companies, there's the equivalent of an innovation token Warren Buffet, someone who has had the right combination of luck and skillful investment of their tokens that they essentially have access to infinite tokens now. And of course, those that come into a company with the blessing of nepotism will inherit several innovation tokens. \n\nThe one place that innovation tokens as a money metaphor breaks down, even more than technical debt, is that you can't really transfer them. A team can very easily transfer its technical debt to another team, but it's much more nebulous what transferring innovation tokens means. \"I'm going to take a more cautious approach so that $other_team can try something new\" isn't really something I've ever heard before, nor does it make a ton of sense. \n\nOne thing to note here is that I'm using innovation tokens slightly outside of its original context. The original essay about them says: \"let's say every company gets about three innovation tokens. You can spend these however you want, but the supply is fixed for a long while. You might get a few more after you achieve a certain level of stability and maturity...\" In my experience, innovation tokens in larger companies aren't necessarily a pot shared by the entire company, but divided into pools among various parts of the engineering organization. When someone comes up with a new technical design for a project, they utilize some of that pool, and access to that pool is like access to credit. Which, come to think of it, is yet another way in which innovation tokens are a better money metaphor than technical debt.\n",
				"date_published": "2023-05-06T21:16:01-05:00",
				"url": "https://micro.breaking.computer/2023/05/06/innovation-tokens-are.html",
				"tags": ["software"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/05/06/give-it-the.html",
				"title": "Parkinson's Law of Triviality",
				"content_html": "<p><a href=\"https://ericaheinz.com/notes/give-it-the-craigslist-test/#.ZFb1LmQpAWN\">Give it the Craigslist test Erica Heinz</a></p>\n<blockquote>\n<p>Parkinson’s law of triviality — People get overwhelmed by big decisions, and so they spend disproportionate time on small ones. User research participants (and designers) love to focus on fun elements like colors and interactions, and don’t get around to the larger questions of why and when the product is needed.</p>\n</blockquote>\n<p>TIL about Parkinson’s Law of Triviality. Seems pretty intuitive, and like a reasonable explanation for bike shedding.</p>\n",
				"content_text": "[Give it the Craigslist test Erica Heinz](https://ericaheinz.com/notes/give-it-the-craigslist-test/#.ZFb1LmQpAWN)\n\n> Parkinson’s law of triviality — People get overwhelmed by big decisions, and so they spend disproportionate time on small ones. User research participants (and designers) love to focus on fun elements like colors and interactions, and don’t get around to the larger questions of why and when the product is needed.\n\nTIL about Parkinson’s Law of Triviality. Seems pretty intuitive, and like a reasonable explanation for bike shedding. \n",
				"date_published": "2023-05-06T19:48:28-05:00",
				"url": "https://micro.breaking.computer/2023/05/06/give-it-the.html",
				"tags": ["software","TIL"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/05/06/you-cant-use.html",
				
				"content_html": "<p><a href=\"https://senyosimpson.com/posts/use-the-right-tool/\">You can&rsquo;t use the right tool for the job - Undefined Behaviour</a></p>\n<p>This was a great read. I usually tend to think of it as “using the right tool for the job accounts for the people using it and environment it’s used in”</p>\n",
				"content_text": " [You can't use the right tool for the job - Undefined Behaviour](https://senyosimpson.com/posts/use-the-right-tool/)\n\nThis was a great read. I usually tend to think of it as “using the right tool for the job accounts for the people using it and environment it’s used in” \n",
				"date_published": "2023-05-06T10:12:24-05:00",
				"url": "https://micro.breaking.computer/2023/05/06/you-cant-use.html",
				"tags": ["software","reactions"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/05/05/i-keep-seeing.html",
				"title": "Thoughts on Scaling Prime Video",
				"content_html": "<p>I keep seeing this take on the recent <a href=\"https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\">Prime Video scaling article</a> that amounts to “hah, told you that microservices were bad! Monoliths rule!” That strikes me as the wrong lesson, and it implies a narrative about technology choices that&rsquo;s largely not true&ndash;and more than a little uncharitable to the engineers making those decisions. &ldquo;Those poor deluded fools and their microservices&rdquo; is a deeply uncurious assessment.</p>\n<blockquote>\n<p>We designed our initial solution as a distributed system using serverless components&hellip; which was a good choice for building the service quickly. In theory, this would allow us to scale each service component independently.</p>\n</blockquote>\n<p>Here&rsquo;s a thing that folks who have never used serverless platforms might not know: serverless platforms like lambda have a <em>ridiculously</em> low activation energy requirement. You can get a lambda up and running in minutes, and the experience of doing so is pretty frictionless. If someone came to you and said &ldquo;build me a system that needs to have X components scale independently,&rdquo; a bunch of lambdas is a pretty reasonable way to do it.</p>\n<p>The authors go on to say</p>\n<blockquote>\n<p>We realized that distributed approach wasn&rsquo;t bringing a lot of benefits in <strong>our specific use case</strong>, so we packed all of the components into a single process. [emphasis mine]</p>\n</blockquote>\n<p>A lot of the reason that the initial approach didn&rsquo;t work is that the authors were passing a lot of data between services, using an S3 bucket as an intermediary. Does that suggest that they were dealing with a distributed monolith, a well known anti-pattern? Yes. Does that invalidate the idea of using microservices? No.</p>\n<p>One part of the article that interested me, but I haven&rsquo;t seen folks mention as much, is this:</p>\n<blockquote>\n<p>In the initial design, we could scale several detectors horizontally, as each of them ran as a separate microservice&hellip; However, in our new approach the number of detectors only scale vertically because they all run within the same instance. Our team regularly adds more detectors to the service and we already exceeded the capacity of a single instance. To overcome this problem, we cloned the service multiple times, parametrizing each copy with a different subset of detectors. We also implemented a lightweight orchestration layer to distribute customer requests.</p>\n</blockquote>\n<p>Having dealt with a monolith that deploys in parameterized &ldquo;fleets,&rdquo; I can say with a fairly high degree of confidence that there&rsquo;s a decent amount of complexity hiding in that design. Is it as much complexity as their previous design? I don&rsquo;t know! It depends on a lot of details not in the post. But it&rsquo;s far less cut and dry than &ldquo;we did a monolith and now everything is simple and great.&rdquo;</p>\n<p>Ultimately, I don&rsquo;t see this post as an indictment of microservices so much as a story of doing good engineering. The engineers in this situation started with a reasonable, low friction architecture, and reworked it as scaling limits were discovered. The new architecture traded some complexities for others, and achieved its intended goals. That&rsquo;s good engineering.</p>\n",
				"content_text": "I keep seeing this take on the recent [Prime Video scaling article](https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90) that amounts to “hah, told you that microservices were bad! Monoliths rule!” That strikes me as the wrong lesson, and it implies a narrative about technology choices that's largely not true--and more than a little uncharitable to the engineers making those decisions. \"Those poor deluded fools and their microservices\" is a deeply uncurious assessment.\n\n> We designed our initial solution as a distributed system using serverless components... which was a good choice for building the service quickly. In theory, this would allow us to scale each service component independently.\n\nHere's a thing that folks who have never used serverless platforms might not know: serverless platforms like lambda have a _ridiculously_ low activation energy requirement. You can get a lambda up and running in minutes, and the experience of doing so is pretty frictionless. If someone came to you and said \"build me a system that needs to have X components scale independently,\" a bunch of lambdas is a pretty reasonable way to do it. \n\nThe authors go on to say \n\n> We realized that distributed approach wasn't bringing a lot of benefits in **our specific use case**, so we packed all of the components into a single process. [emphasis mine]\n\nA lot of the reason that the initial approach didn't work is that the authors were passing a lot of data between services, using an S3 bucket as an intermediary. Does that suggest that they were dealing with a distributed monolith, a well known anti-pattern? Yes. Does that invalidate the idea of using microservices? No. \n\nOne part of the article that interested me, but I haven't seen folks mention as much, is this:\n\n> In the initial design, we could scale several detectors horizontally, as each of them ran as a separate microservice... However, in our new approach the number of detectors only scale vertically because they all run within the same instance. Our team regularly adds more detectors to the service and we already exceeded the capacity of a single instance. To overcome this problem, we cloned the service multiple times, parametrizing each copy with a different subset of detectors. We also implemented a lightweight orchestration layer to distribute customer requests.\n\nHaving dealt with a monolith that deploys in parameterized \"fleets,\" I can say with a fairly high degree of confidence that there's a decent amount of complexity hiding in that design. Is it as much complexity as their previous design? I don't know! It depends on a lot of details not in the post. But it's far less cut and dry than \"we did a monolith and now everything is simple and great.\" \n\nUltimately, I don't see this post as an indictment of microservices so much as a story of doing good engineering. The engineers in this situation started with a reasonable, low friction architecture, and reworked it as scaling limits were discovered. The new architecture traded some complexities for others, and achieved its intended goals. That's good engineering.\n",
				"date_published": "2023-05-05T22:26:43-05:00",
				"url": "https://micro.breaking.computer/2023/05/05/i-keep-seeing.html",
				"tags": ["software","reactions"]
			},
			{
				"id": "http://while1malloc0.micro.blog/2023/05/05/hello-world-im.html",
				
				"content_html": "<h1 id=\"hello-world\">Hello world!</h1>\n<p>I&rsquo;m trying out micro.blog for a bit on the recommendation of the inimitable <a href=\"https://doug.pub/\">Doug Jones</a>. I&rsquo;ve been interested in it for a bit, and after reading some of <a href=\"https://micro.blog/manton\">@manton</a>&rsquo;s posts I decided to give it a shot. Seems like a cool place so far.</p>\n",
				"content_text": "# Hello world!\r\n\r\nI'm trying out micro.blog for a bit on the recommendation of the inimitable [Doug Jones](https://doug.pub/). I've been interested in it for a bit, and after reading some of [@manton](https://micro.blog/manton)'s posts I decided to give it a shot. Seems like a cool place so far.\n",
				"date_published": "2023-05-05T21:46:51-05:00",
				"url": "https://micro.breaking.computer/2023/05/05/hello-world-im.html"
			}
	]
}
